/**
 * Copyright 2016 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/


RED.view.navigator = (function() {
    var nav_scale = 25;
    var nav_width = 5000/nav_scale;
    var nav_height = 5000/nav_scale;

    var navContainer;
    var navBox;
    var navBorder;
    var scrollPos;
    var scaleFactor;
    var chartSize;
    var dimensions;
    var isDragging;
    var isShowing = false;

    var domSelection

    function refreshNodes() {
        if (!isShowing) {
            return;
        }
        domSelection.refresh(RED.view.getActiveNodes())
    }

    function onScroll() {
        if (!isDragging) {
            resizeNavBorder();
        }
    }
    function resizeNavBorder() {
        if (navBorder) {
            scaleFactor = RED.view.scale();
            chartSize = [ $("#red-ui-workspace-chart").width(), $("#red-ui-workspace-chart").height()];
            scrollPos = [$("#red-ui-workspace-chart").scrollLeft(),$("#red-ui-workspace-chart").scrollTop()];

            navBorder.attr('x', scrollPos[0]/nav_scale)
            navBorder.attr('y', scrollPos[1]/nav_scale)
            navBorder.attr('width',chartSize[0]/nav_scale/scaleFactor)
            navBorder.attr('height',chartSize[1]/nav_scale/scaleFactor)
        }
    }
    function toggle() {
        if (!isShowing) {
            isShowing = true;
            $("#red-ui-view-navigate").addClass("selected");
            resizeNavBorder();
            refreshNodes();
            $("#red-ui-workspace-chart").on("scroll",onScroll);
            navContainer.fadeIn(200);
        } else {
            isShowing = false;
            navContainer.fadeOut(100);
            $("#red-ui-workspace-chart").off("scroll",onScroll);
            $("#red-ui-view-navigate").removeClass("selected");
        }
    }

    return {
        init: function() {

            $(window).on("resize", resizeNavBorder);
            RED.events.on("sidebar:resize",resizeNavBorder);
            RED.actions.add("core:toggle-navigator",toggle);

            navContainer = $('<div>').css({
                "position":"absolute",
                "bottom":$("#red-ui-workspace-footer").height(),
                "right":0,
                zIndex: 1
            }).appendTo("#red-ui-workspace").hide();

            navBox = $(RED.utils.createSVGElement('svg', {id: "red-ui-navigator-canvas", width: nav_width, height: nav_height, 'pointer-events': 'all'})).appendTo(navContainer)

            const navBoxBody = $(RED.utils.createSVGElement("rect", { x: 0, y: 0, width: nav_width, height: nav_height, fill: 'none', stroke: 'none', 'pointer-events': 'all'}))
            .css({'cursor': 'pointer'})
            navBoxBody.on('mousedown',function(event) {
                // Update these in case they have changed
                scaleFactor = RED.view.scale();
                chartSize = [ $("#red-ui-workspace-chart").width(), $("#red-ui-workspace-chart").height()];
                dimensions = [chartSize[0]/nav_scale/scaleFactor, chartSize[1]/nav_scale/scaleFactor];
                var newX = Math.max(0,Math.min(event.offsetX+dimensions[0]/2,nav_width)-dimensions[0]);
                var newY = Math.max(0,Math.min(event.offsetY+dimensions[1]/2,nav_height)-dimensions[1]);
                navBorder.attr('x',newX)
                navBorder.attr('y',newY);
                isDragging = true;
                $("#red-ui-workspace-chart").scrollLeft(newX*nav_scale*scaleFactor);
                $("#red-ui-workspace-chart").scrollTop(newY*nav_scale*scaleFactor);
            }).on('mousemove', function(event) {
                if (!isDragging) { return }
                if (event.buttons === 0) {
                    isDragging = false;
                    return;
                }
                var newX = Math.max(0,Math.min(event.offsetX+dimensions[0]/2,nav_width)-dimensions[0]);
                var newY = Math.max(0,Math.min(event.offsetY+dimensions[1]/2,nav_height)-dimensions[1]);
                navBorder.attr('x',newX)
                navBorder.attr('y',newY);
                $("#red-ui-workspace-chart").scrollLeft(newX*nav_scale*scaleFactor);
                $("#red-ui-workspace-chart").scrollTop(newY*nav_scale*scaleFactor);
            }).on('mouseup', function() {
                isDragging = false;
            }).appendTo(navBox)

            navBorder = $(RED.utils.createSVGElement("rect", { "class": "red-ui-navigator-border" })).appendTo(navBox)

            const navVis = $(RED.utils.createSVGElement('g')).appendTo(navBox)

            domSelection = RED.utils.domSelection(navVis[0], '.red-ui-navigator-node', function() {
                return RED.utils.createSVGElement('rect', { class: 'red-ui-navigator-node', 'pointer-events': 'none' })
            }, function(node) {
                node.setAttribute('x', (this.x-this.w/2)/nav_scale)
                node.setAttribute('y', (this.y-this.h/2)/nav_scale)
                node.setAttribute('width', Math.max(9,this.w/nav_scale))
                node.setAttribute('height', Math.max(3,this.h/nav_scale))
                node.setAttribute('fill', RED.utils.getNodeColor(this.type,this._def))
            })

            RED.statusBar.add({
                id: "view-navigator",
                align: "right",
                element: $('<button class="red-ui-footer-button-toggle single" id="red-ui-view-navigate"><i class="fa fa-map-o"></i></button>')
            })

            $("#red-ui-view-navigate").on("click", function(evt) {
                evt.preventDefault();
                toggle();
            })
            RED.popover.tooltip($("#red-ui-view-navigate"),RED._('actions.toggle-navigator'),'core:toggle-navigator');
        },
        refresh: refreshNodes,
        resize: resizeNavBorder,
        toggle: toggle
    }


})();
