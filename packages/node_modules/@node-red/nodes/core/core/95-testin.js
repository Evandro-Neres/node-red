/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/
module.exports = function(RED) {
    "use strict";

    function TestIn(n) {
        // Create a RED node
        RED.nodes.createNode(this,n);
        this.topic = n.topic;
        this.target = n.target;
        this.rules = n.rules || [];

        var node = this;
        var valid = true;

        for (var i = 0; i < this.rules.length; i += 1) {
            var rule = this.rules[i];
            try {
                if (rule.message) {
                    JSON.parse(rule.message);
                }
            } catch (err) {
                this.error("Invalid JSON property:" + err.message);
                valid = false;
            }
        }
        if (!valid) {
            return;
        }

        this.on('input', function(msg) {
            var target = msg.label;
            var send = false;
            for (var i = 0; i < this.rules.length; i += 1) {
                var rule = this.rules[i];
                if (target.indexOf(rule.label) >= 0) {
                    var msgid = RED.util.generateId();
                    var testCase = {payload: "", topic: "", label: rule.label };

                    var ruleMsg = JSON.parse(rule.message);
                    Object.keys(ruleMsg).forEach(function(key) {
                        RED.util.setMessageProperty(testCase, key, ruleMsg[key]);
                    })
                    testCase.testin = this.id;
                    this.send(testCase);
                    send = true;
                    break;
                }
            }
            if (!send) {
                RED.events.emit('flow-test:'+msg.label, { status: "failed (Test in node setting is wrong.)", label: msg.label });
            }

        });
    }
    RED.nodes.registerType("test in", TestIn);
}
