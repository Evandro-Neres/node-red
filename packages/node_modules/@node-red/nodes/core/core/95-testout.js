/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

module.exports = function(RED) {
    "use strict";
    function TestOut(n) {
        RED.nodes.createNode(this, n);
        this.name = n.name;
        this.topic = n.topic;
        this.target = n.target;
        this.testin = n.testin;
        this.rules = n.rules || [];

        var node = this;
        var valid = true;

        for (var i = 0; i < this.rules.length; i += 1) {
            var rule = this.rules[i];
            if (rule.scenarios) {
                for (var j = 0; j < rule.scenarios.length; j += 1) {
                    var scenario = rule.scenarios[j];
                    try {
                        if (scenario.expected) {
                            JSON.parse(scenario.expected);
                        }
                    } catch (err) {
                        this.error("Invalid JSON property:" + err.message);
                        valid = false;
                    }
                }
            }
        }
        if (!valid) {
            return;
        }

        this.on('input', function(msg) {
            var testinFlag = false;
            for (var i = 0; i < this.rules.length; i += 1) {
                var rule = this.rules[i];

                if (msg.testin === rule.testin) {
                    testinFlag = true;
                }
                if (rule.scenarios) {
                    var labelFlag = false;
                    for (var j = 0; j < rule.scenarios.length; j += 1) {
                        var scenario = rule.scenarios[j];
                        if (msg.label === scenario.label) {
                            labelFlag = true;
                            var expected = JSON.parse(scenario.expected);
                            Object.keys(expected).forEach(function(key) {
                                var result = RED.util.getMessageProperty(msg, key);
                                if (result === expected[key]) {
                                    RED.events.emit('flow-test:' + msg.label, { status: "passed", label: msg.label });
                                } else {
                                    RED.events.emit('flow-test:' + msg.label, { status: "failed (Message is wrong.)", label: msg.label });
                                }
                            })
                        }
                    }
                }
                if (!labelFlag) {
                    RED.events.emit('flow-test:' + msg.label, { status: "failed (Label not found.)", label: msg.label });
                }
            }

            if (!testinFlag) {
                RED.events.emit('flow-test:' + msg.label, { status: "failed (Received on a wrong test out node.)", label: msg.label });
            }
        });
    }
    RED.nodes.registerType("test out", TestOut);

}
