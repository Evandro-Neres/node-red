/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/
const fs = require("fs-extra");
const path = require("path");
const crypt = require("crypto-js");
const mustache = require("mustache");
const util = require("@node-red/util");
const exec = util.exec;

const NPM_COMMAND = (process.platform === "win32") ? "npm.cmd" : "npm";

let runtime = null;
let settings = null;


function getTempDir() {
    const dir = (settings.userDir || process.env.NODE_RED_HOME || ".");
    const prefix = path.join(dir, ".module_");
    return fs.mkdtempSync(prefix);
}

function init(_runtime) {
    runtime = _runtime;
    settings = _runtime.settings;
}

function createFromTemplate(dir, name, meta) {
    const dst = path.join(dir, name);
    let srcDir = path.join(__dirname, "template");
    if (settings.subflowModule && settings.subflowModule.templateDir) {
        srcDir = settings.subflowModule.templateDir
    }
    try {
        const src = path.join(srcDir, name +".mustache");
        const template = fs.readFileSync(src, "utf-8");
        const text = mustache.render(template, meta);
        fs.writeFileSync(dst, text, "utf-8");
    }
    catch (e) {
        console.log("error: ", e);
        throw e;
    }
}


function createMeta(dir, origMeta) {
    var meta = Object.assign({}, origMeta); // copy
    var keywords = meta.keywords || "";
    meta.keywords = JSON.stringify(keywords.split(",")); 
    createFromTemplate(dir, "package.json", meta);
    createFromTemplate(dir, "subflow.js", meta);
    createFromTemplate(dir, "README.md", meta);
    createFromTemplate(dir, "LICENSE", meta);
}

function getSubflowDef(flow) {
    const newFlow = [];
    let sf = null;
    flow.forEach((item) => {
        if (item.hasOwnProperty("meta") &&
            item.meta.hasOwnProperty("module")) {
            if (sf !== null) {
                throw new Error("unexpected subflow definition");
            }
            sf = item;
        }
        else {
            newFlow.push(item);
        }
    });
    if ((sf === null) || (newFlow.length === 0)) {
        throw new Error("unexpected subflow definition");
    }
    return [sf, newFlow];
}

function getEncoder(encoding) {
    if (encoding === "AES") {
        return function (flow, key) {
            var data = JSON.stringify(flow);
            var enc = crypt.AES.encrypt(data, key);
            return enc.toString();
        }
    }
    var sfm = settings.encodeSubflow;
    if (sfm) {
        var methods = sfm.methods;
        if (methods && Array.isArray(methods)) {
            var method = null;
            methods.forEach(function (m) {
                if (m.name === encoding) {
                    method = m;
                }
            });
            if (method) {
                return method.encode;
            }
        }
    }
    throw new Error("encoding not defined:" +encoding);
}

function createJson(dir, flow, meta) {
    const jsonPath = path.join(dir, "subflow.json");
    const [sf, newFlow] = getSubflowDef(flow);
    const encoding = meta.encoding;
    const key = meta.encodekey;
    if (encoding && (encoding !== "none") &&
        key && (key !== "")) {
        const encode = getEncoder(encoding);
        const encStr = encode(newFlow, key);
        sf.flow = {
            encoding: encoding,
            flow: encStr
        };
    }
    else {
        sf.flow = newFlow;
    }
    const data = JSON.stringify(sf, null, "\t");
    fs.writeFileSync(jsonPath, data, "utf-8");
}

function packNPM(dir, meta) {
    const args = ["pack"];
    return exec.run(NPM_COMMAND, args, { cwd: dir }, true)
        .then(function () {
            const name = `${meta.module}-${meta.version}.tgz`;
            const pkg = path.join(dir, name);
            const data = fs.readFileSync(pkg, "base64");
            return data;
        });
}

function createSubflow(meta, flow) {
    const dir = getTempDir();

    createMeta(dir, meta);
    createJson(dir, flow, meta);
    return packNPM(dir, meta).then((data) => {
        return data;
    }).finally(() => {
        fs.removeSync(dir);
    });
}

module.exports = {
    init: init,
    createSubflow: createSubflow
}
