const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const crypt = require("crypto-js");
const mustache = require("mustache");
const util = require("@node-red/util");
const exec = util.exec;

const NPM_COMMAND = (process.platform === "win32") ? "npm.cmd" : "npm";

let runtime = null;
let settings = null;

/**
 * Creates temporary directoty for creating NPM module
 * @return {String} - path of the created directory
 */
function getTempDir() {
    const dir = os.tmpdir();
    const prefix = path.join(dir, ".module_");
    return fs.mkdtempSync(prefix);
}

function init(_runtime) {
    runtime = _runtime;
    settings = _runtime.settings;
}

/**
 * Creates files in subflow NPM module from templates
 * @param {String} dir - path of temporary directory
 * @param {String} name - name of subflow
 * @param {Object} meta - mata data definition of subflow
 */
function createFromTemplate(dir, name, meta) {
    const dst = path.join(dir, name);
    let srcDir = path.join(__dirname, "template");
    if (settings.subflowModule && settings.subflowModule.templateDir) {
        srcDir = settings.subflowModule.templateDir
    }
    try {
        const src = path.join(srcDir, name +".mustache");
        const template = fs.readFileSync(src, "utf-8");
        const text = mustache.render(template, meta);
        fs.writeFileSync(dst, text, "utf-8");
    }
    catch (e) {
        console.log("error: ", e);
        throw e;
    }
}


/**
 * Creates required files for subflow NPM module
 * @param {String} dir - path of temporary directory
 * @param {Object} origMeta - original mata data definition of subflow
 */
function createFiles(dir, origMeta) {
    const meta = Object.assign({}, origMeta); // copy
    const keywords = meta.keywords || "";
    meta.keywords = JSON.stringify(keywords.split(",")); 
    createFromTemplate(dir, "package.json", meta);
    createFromTemplate(dir, "subflow.js", meta);
    createFromTemplate(dir, "README.md", meta);
    createFromTemplate(dir, "LICENSE", meta);
}

/**
 * Create installable subflow definition JSON data from subflow definition 
 * @param {Object} flow - subflow definition
 * @return {Object} - installable subflow definition
 */
function getSubflowDef(flow) {
    const newFlow = [];
    let sf = null;
    flow.forEach((item) => {
        if (item.hasOwnProperty("meta") &&
            item.meta.hasOwnProperty("module")) {
            if (sf !== null) {
                throw new Error("unexpected subflow definition");
            }
            sf = item;
        }
        else {
            newFlow.push(item);
        }
    });
    if ((sf === null) || (newFlow.length === 0)) {
        throw new Error("unexpected subflow definition");
    }
    return [sf, newFlow];
}

/**
 * Get encoding function of specified encoding
 * @param {String} encoding - encoding name
 * @return {Function} - encoding funciton
 */
function getEncoder(encoding) {
    if (encoding === "AES") {
        return function (flow, key) {
            const data = JSON.stringify(flow);
            const enc = crypt.AES.encrypt(data, key);
            return enc.toString();
        }
    }
    const sfm = settings.subflowModule && settings.subflowModule.encodeSubflow;
    if (sfm) {
        const methods = sfm.methods;
        if (methods && Array.isArray(methods)) {
            let method = null;
            methods.forEach(function (m) {
                if (m.name === encoding) {
                    method = m;
                }
            });
            if (method) {
                return method.encode;
            }
        }
    }
    throw new Error("encoding not defined:" +encoding);
}

/**
 * Create JSON file of subflow
 * @param {String} dir - path of temporary directory
 * @param {Object} flow - subflow definition
 * @param {Object} meta - mata data definition of subflow
 */
function createJson(dir, flow, meta) {
    const jsonPath = path.join(dir, "subflow.json");
    const [sf, newFlow] = getSubflowDef(flow);
    const encoding = meta.encoding;
    const key = meta.encodekey;
    if (encoding && (encoding !== "none") &&
        key && (key !== "")) {
        const encode = getEncoder(encoding);
        const encStr = encode(newFlow, key);
        sf.flow = {
            encoding: encoding,
            flow: encStr
        };
    }
    else {
        sf.flow = newFlow;
    }
    const data = JSON.stringify(sf, null, "\t");
    fs.writeFileSync(jsonPath, data, "utf-8");
}

/**
 * Package NPM module of subflow
 * @param {String} dir - path of temporary directory
 * @param {Object} meta - mata data definition of subflow
 * @return {Promise} - promise of execution of npm pack
 */
function packNPM(dir, meta) {
    const args = ["pack"];
    return exec.run(NPM_COMMAND, args, { cwd: dir }, true)
        .then(function () {
            const name = `${meta.module}-${meta.version}.tgz`;
            const pkg = path.join(dir, name);
            const data = fs.readFileSync(pkg, "base64");
            return data;
        });
}

/**
 * Create subflow NPM module (packed tgz data)
 * @param {Object} meta - mata data definition of subflow
 * @param {Object} flow - subflow definition
 * @return {Promise} - promise of execution of npm pack
 */
function createSubflow(meta, flow) {
    const dir = getTempDir();

    createFiles(dir, meta);
    createJson(dir, flow, meta);
    return packNPM(dir, meta).then((data) => {
        return data;
    }).finally(() => {
        fs.removeSync(dir);
    });
}

module.exports = {
    init: init,
    createSubflow: createSubflow
}
