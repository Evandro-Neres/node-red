{
    "$string": {
        "args": "arg",
        "desc": "다음과 같은 캐스팅 규칙을 사용하여 *arg* 매개 변수를 문자열로 변환합니다. \n\n - 문자열은 변경되지 않습니다. \n - 함수는 빈 문자열로 변환됩니다. \n - 숫자 무한대와 NaN은 오류를 발생시킵니다. JSON 번호로 표현할 수 없습니다. \n - 다른 모든 값은 JSON.stringify 함수를 사용하여 JSON 문자열로 변환됩니다."
    },
    "$length": {
        "args": "str",
        "desc": "문자열 `str`의 문자 수를 반환합니다. 만약 `str`이 문자열이 아니면 에러를 발생합니다."
    },
    "$substring": {
        "args": "str, start[, length]",
        "desc": "(zero-offset)의 `start`에서 시작하여 첫번째 변수 `str`을 포함한 문자열을 반환합니다. 만약 `length`가 지정된 경우 부분 문자열에는 최대 `length`의 크기를 갖습니다. 만약 `start` 변수가 음수이면 `str`의 끝에서부터 문자수를 나타냅니다."
    },
    "$substringBefore": {
        "args": "str, chars",
        "desc": "`str`에 `chars`문자가 처음으로 나오기 전까지의 부분문자열을 반환합니다. 만약 `chars`가 없으면 `str`을 반환합니다."
    },
    "$substringAfter": {
        "args": "str, chars",
        "desc": "`str`에 `chars`문자가 처음으로 나온 이후의 부분문자열을 반환합니다. 만약 `chars`가 없으면 `str`을 반환합니다."
    },
    "$uppercase": {
        "args": "str",
        "desc": "`str`의 대문자를 반환합니다."
    },
    "$lowercase": {
        "args": "str",
        "desc": "`str`의 소문자를 반환합니다."
    },
    "$trim": {
        "args": "str",
        "desc": "다음의 순서대로 `str`의 모든 공백을 Normalizes와 trim을 합니다:\n\n - 모든 탭, 캐리지 리턴 및 줄 바꿈은 공백으로 대체됩니다. \n- 연속된 공백은 공백으로 줄어듭니다.\n- 후행 및 선행 공백이 제거됩니다.\n\n 만일 `str`이 지정되지 않으면 (i.e. 이 함수가 인수없이 호출되면), context값이 `str`의 값으로 사용됩니다.. `str`이 문자열이 아니면 에러가 발생합니다."
    },
    "$contains": {
        "args": "str, pattern",
        "desc": "`str`이 `pattern`과 일치하면 `true`를 반환합니다. 그외에는 `false`를 반환합니다. 만약 `str`이 지정되지 않으면 (i.e. 이 함수가 인수없이 호출되면), context값이 `str`의 값으로 사용됩니다. `pattern` 변수는 문자열이거나 정규표현식 일수 있습니다."
    },
    "$split": {
        "args": "str[, separator][, limit]",
        "desc": "`str` 매개 변수를 부분 문자열의 배열로 나눕니다. `str`이 문자열이 아니면 오류입니다. 선택적인`separator` 매개 변수는 문자열 또는 정규 표현식으로 분리되어야하는`str` 내의 문자를 지정합니다. `separator`가 지정되지 않으면 빈 문자열이 가정되고`str`은 단일 문자의 배열로 분리됩니다. `separator`가 문자열이 아니면 오류입니다. 선택적 'limit` 매개 변수는 결과 배열에 포함 할 하위 문자열의 최대 개수를 지정하는 숫자입니다. 추가 하위 문자열은 버려집니다. `limit`가 지정되지 않으면`str`은 결과 배열의 크기 제한이없이 완전히 분리됩니다. `limit`이 음수가 아닌 경우 에러입니다."
    },
    "$join": {
        "args": "array[, separator]",
        "desc": "구성 요소 문자열의 배열을 결합 된 단일 문자열로 결합합니다. 각 구성 요소 문자열은 선택적 `separator` 매개 변수로 구분됩니다. 입력 `array`에 문자열이 아닌 항목이 있으면 오류입니다. `separator`가 지정되지 않으면 빈 문자열, 즉 구성 요소 문자열 사이에 분리자가 없는 것으로 가정합니다. `separator`가 문자열이 아니면 오류입니다."
    },
    "$match": {
        "args": "str, pattern [, limit]",
        "desc": "`str`문자열에서 `pattern`의 정규표현식과 일치하는 오브젝트 배열을 리턴합니다."
    },
    "$replace": {
        "args": "str, pattern, replacement [, limit]",
        "desc": "`str`문자열에서 `pattern`의 정규표현식과 일치하는 부분을 `replacement`로 대체합니다..\n\n선택 매개 변수 `limit`는 대체 횟수를 지정합니다."
    },
    "$now": {
        "args": "",
        "desc": "ISO 8601 호환 형식으로 타임 스탬프를 생성하고 이를 문자열로 반환합니다."
    },
    "$base64encode": {
        "args": "string",
        "desc": "ASCII 문자열을 base 64 표현으로 변환합니다. 문자열의 각 문자는 이진 데이터의 바이트로 처리됩니다. 이렇게 하려면 문자열의 모든 문자가 URI로 인코딩 된 문자열의 모든 문자를 포함하는 0x00에서 0xFF 범위에 있어야합니다. 해당 범위를 벗어난 유니 코드 문자는 지원되지 않습니다"
    },
    "$base64decode": {
        "args": "string",
        "desc": "base 64로 인코딩된 문자열을 UTF-8 유니코드로 변환합니다."
    },
    "$number": {
        "args": "arg",
        "desc": "`arg`를 다음과 같은 규칙을 사요하여 숫자로 변경합니다. :\n\n - 숫자는 변경되지 않습니다.\n - 숫자를 포함한 문자열은 즉 legal JSON 숫자는 숫자로 변환됩니다.\n - 그이 모든 값들은 에러를 발생합니다."
    },
    "$abs": {
        "args": "number",
        "desc": "`number`의 절대값을 반환합니다."
    },
    "$floor": {
        "args": "number",
        "desc": "`number`를 `number`보다 같거나 작은 정수로 반환합니다."
    },
    "$ceil": {
        "args": "number",
        "desc": "`number`를 `number`와 같거나 큰 정수로 반환합니다."
    },
    "$round": {
        "args": "number [, precision]",
        "desc": "선택적 변수 `precision`의 지정된 소수 자릿수로 반올림 된 `number` 값을 반환합니다."
    },
    "$power": {
        "args": "base, exponent",
        "desc": "`base`의 값을`exponent`의 거듭 제곱으로 돌려줍니다."
    },
    "$sqrt": {
        "args": "number",
        "desc": "`number` 매개 변수 값의 제곱근을 반환합니다."
    },
    "$random": {
        "args": "",
        "desc": "0보다 크고 1보다 작은 난수를 반환합니다."
    },
    "$millis": {
        "args": "",
        "desc": "Unix Epoch (1970 년 1 월 1 일 UTC) 이후의 밀리 초 수를 숫자로 반환합니다. 식의 평가 내에서 $millis()의 모든 호출은 모두 같은 값을 반환합니다."
    },
    "$sum": {
        "args": "array",
        "desc": "숫자 `array` 배열의 산술 합계를 반환합니다. 입력 `array`에 숫자가 아닌 항목이 있으면 오류입니다."
    },
    "$max": {
        "args": "array",
        "desc": "숫자 `array` 배열에서 최대 수를 반환합니다. 입력 `array`에 숫자가 아닌 항목이 들어 있으면 오류입니다."
    },
    "$min": {
        "args": "array",
        "desc": "숫자 `array` 배열에서 최소 수를 반환합니다. 입력 `array`에 숫자가 아닌 항목이 들어 있으면 오류입니다."
    },
    "$average": {
        "args": "array",
        "desc": "숫자 `array` 배열에서 산술평균을 반환합니다. 입력 `array`에 숫자가 아닌 항목이 들어 있으면 오류입니다."
    },

    "$boolean": {
        "args": "arg",
        "desc": "`arg` 값을 다음의 규칙에 의해 Boolean으로 변환합니다::\n\n - `Boolean` : 변하지 않음\n - `string`: empty : `false`\n - `string`: non-empty : `true`\n - `number`: `0` : `false`\n - `number`: non-zero : `true`\n - `null` : `false`\n - `array`: empty : `false`\n - `array`: contains a member that casts to `true` : `true`\n - `array`: all members cast to `false` : `false`\n - `object`: empty : `false`\n - `object`: non-empty : `true`\n - `function` : `false`"
    },
    "$not": {
        "args": "arg",
        "desc": "Returns Boolean NOT on the argument. `arg` is first cast to a boolean"
    },
    "$exists": {
        "args": "arg",
        "desc": "`arg` 표현식이 값으로 평가되면 Boolean을 반환하고, 표현식이 아무 것도(예: 존재하지 않는 필드 참조에 대한 경로) 와 일치하지 않으면 false를 반환합니다."
    },
    "$count": {
        "args": "array",
        "desc": "`array`의 갯수를 반환합니다."
    },
    "$append": {
        "args": "array, array",
        "desc": "두개의 `array`를 병합합니다."
    },
    "$sort": {
        "args": "array [, function]",
        "desc": "`array` 매개 변수의 모든 값을 순서대로 정렬하여 반환합니다. \n\n 비교함수 `function`이 제공되면 두 개의 매개변수를 취하는 함수 여야 합니다 : \n\n `function(left,right)` \n\n 이 함수는 정렬 알고리즘에 의해 호출되어 왼쪽과 오른쪽의 두 값을 비교합니다. left의 값을 right의 값 뒤에 원하는 정렬 순서대로 놓아야하는 경우 함수는 부울을 나타내는 `true`를 반환해야합니다.그렇지 않으면 `false` 를 반환해야 합니다."
    },
    "$reverse": {
        "args": "array",
        "desc": "`array`에 포함된 모든 값의 순서를 역순으로 변환하여 반환합니다."
    },
    "$shuffle": {
        "args": "array",
        "desc": "`array`에 포함된 모든 값의 순서를 섞어서 반환합니다."
    },
    "$zip": {
        "args": "array, ...",
        "desc": "색인 0, 1, 2 ....로 `array1` ... arrayN` 인자들로부터 그룹화 된 값들의 배열을 포함하는 convolved (zipped) 배열을 반환합니다."
    },
    "$keys": {
        "args": "object",
        "desc": "`object` 키를 포함하는 배열을 반환합니다. 인수가 객체의 배열이면 반환 된 배열에 모든 객체에있는 모든 키의 중복되지 않은 목록이 포함됩니다."
    },
    "$lookup": {
        "args": "object, key",
        "desc": "`object` 내의 `key`에 관련 지을 수 있었던 값을 돌려줍니다. 최초의 인수가 객체의 배열 인 경우, 배열 내의 모든 객체가 검색되어 모든 `key`의 발생에 관련 지을 수 있었던 값이 돌려 주어집니다."
    },
    "$spread": {
        "args": "object",
        "desc": "`object`의 키/값 쌍별로 오브젝트 배열을 만듭니다. 각 오브젝트는 하나의 키/값 쌍을 갖습니다. 만이 `object`가 오브젝트의 배열이면 결과 배열은 제공된 배열의 모든 객체에있는 모든 키/값 쌍에 대한 객체를 포함합니다."
    },
    "$merge": {
        "args": "array&lt;object&gt;",
        "desc": "입력 배열에있는 각 객체의 모든 키/값 쌍을 포함하는 단일 `object`를 `object`의 배열로 병합합니다. 입력 객체 중 하나라도 동일한 키를 포함하면 반환 된 `object`는 배열에 있는 마지막 값을 가지며, 입력 배열에 객체가 아닌 항목이 있으면 오류입니다. "
    },
    "$sift": {
        "args": "object, function",
        "desc": "두 번째 매개 변수로 전달 된 `function`을 충족시키는 `object` 매개 변수의 키/값 쌍만 포함하는 객체를 반환합니다. \n\n 두 번째 매개 변수로 제공되는 `function` 다음과 같은 형식이어야 합니다 : \n\n `function (value [, key [, object]])`"
    },
    "$each": {
        "args": "object, function",
        "desc": "`object`의 각 키/값 쌍에서 `function`을 적용하여 값의 배열을 반환합니다."
    },
    "$map": {
        "args": "array, function",
        "desc": "`array` 매개 변수의 각 값에 `function` 매개 변수를 적용한 결과를 포함하는 배열을 반환합니다. \n\n 두 번째 매개 변수로 제공되는 `function`은 다음 형식을 가져야 합니다.  \n\n `function (value[, index[, array]])`"
    },
    "$filter": {
        "args": "array, function",
        "desc": "`array` 매개 변수의 각 값에 `function` 매개 변수를 적용한 결과를 포함하는 배열을 반환합니다. \n\n 두 번째 매개 변수로 제공되는 `function`은 다음 형식을 가져야 합니다.  \n\n `function (value[, index[, array]])`"
    },
    "$reduce": {
        "args": "array, function [, init]",
        "desc": "함수의 이전 매개 변수 적용 결과와 함께 `function` 매개 변수를 `array`의 각 값에 연속적으로 적용하여 얻은 집계 값을 반환합니다. \n\n 함수는 두 개의 인수를 받아야하고 `array`내의 각 값 사이에 중위 연산자를 사용합니다. \n\n 선택적인 `init` 매개 변수가 집계의 초기 값으로 사용됩니다."
    },
    "$flowContext": {
        "args": "string[, string]",
        "desc": "순서도의 context 프로퍼티를 가져온다.\n\nNode-RED 정의 함수입니다."
    },
    "$globalContext": {
        "args": "string[, string]",
        "desc": "순서도의 Global context 프로퍼티를 가져온다.\n\nNode-RED 정의 함수입니다."
    },
    "$pad": {
        "args": "string, width [, char]",
        "desc": "필요한 경우 여분의 패딩을 사용하여 `string`의 복사본을 반환합니다. 따라서 총 문자 수가 적어도 `width` 매개 변수의 절대 값 이상이됩니다. \n\n `width`가 양수이면 숫자이면 문자열은 오른쪽으로 채워지고, 음수이면 왼쪽으로 채워집니다. \n\n 선택적 `char` 인수는 사용할 채움 문자를 지정합니다. 지정하지 않으면 기본값으로 공백 문자가 사용됩니다 ."
    },
    "$fromMillis": {
        "args": "number",
        "desc": "Unix Epoch (1970 년 1 월 1 일 UTC) 이후의 밀리 초를 나타내는 숫자를 ISO 8601 형식의 타임 스탬프 문자열로 변환."
    },
    "$formatNumber": {
        "args": "number, picture [, options]",
        "desc": "`number`를 문자열로 변환하고 `picture` 문자열에 지정된 십진수 표현으로 형식을 지정합니다. \n\n 이 함수의 동작은 XPath/XQuery 함수 fn : format- XPath F & O 3.1 사양에 정의 된 숫자입니다. 그림 문자열 매개 변수는 숫자 서식이 정의되고 fn : format-number와 같은 구문을 정의합니다. \n\n 선택적 세 번째 인수 `options`는 기본 로캐일에 고유의 포멧 캐릭터를 재정의하는데 사용합니다. 이 인수는 XPath F & O 3.1 사양의 10 진수 형식 섹션에 지정된 이름/값 쌍을 포함하는 객체여야합니다. "
    },
    "$formatBase": {
        "args": "number [, radix]",
        "desc": "`number`를 문자열로 캐스트하고 `radix` 인자에 의해 지정된 숫자로 표현된 정수로 포맷합니다. `radix`가 지정되지 않으면 기본값은 10입니다.`radix`는 2와 36 사이가 될 수 있습니다. 그렇지 않으면 에러가 발생합니다."
    },
    "$toMillis": {
        "args": "timestamp",
        "desc": "ISO 8601 형식의 `timestamp` 문자열을 Unix Epoch (1970 년 1 월 1 일 UTC) 이후의 밀리 초 수로 변환하십시오. 문자열이 올바른 형식이 아닌 경우 오류가 발생합니다."
    },
    "$env": {
        "args": "arg",
        "desc": "환경변수를 값으로 전달합니다..\n\nNode-RED 정의 함수입니다."
    }
}