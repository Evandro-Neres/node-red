{
    "$append": {
        "args": "array, array",
        "desc": "2つの配列を連結します"
    },
    "$average": {
        "args": "array",
        "desc": "数値の `array`の平均値を返します。入力 `array`に数字でない項目が含まれていると、エラーになります。"
    },
    "$boolean": {
        "args": "arg",
        "desc": "次の規則を使用して、`arg`をブール値に変換します。\n\n - ブール値：変更なし\n - 空の文字列：`false`\n - 空でない文字列：`true`\n - 0の数値：`false`\n - 0でない数値：` true`\n - `null`：` false`\n - 空の配列：`false`\n - `true`に変換できる値を含む配列：`true`\n - `false`に変換できる値を含む配列：`false`\n - 空のオブジェクト：` false`\n - 空ではないオブジェクト：`true`\n - 関数定義：`false`"
    },
    "$count": {
        "args": "array",
        "desc": "配列`array`内の項目数を返します。"
    },
    "$exists": {
        "args": "arg",
        "desc": "`arg`式が値を評価する場合はブール値`true`を返し、存在しないフィールド参照へのパスなど、式が何も一致しない場合は `false`を返します。"
    },
    "$join": {
        "args": "array[, separator]",
        "desc": "配列内の文字列を連結して1つの文字列を作成します。各文字列は、オプションの `separator`パラメータで区切りることができます。`array`に文字列ではない項目が含まれていると、エラーになります。 `separator`が指定されていない場合は、空文字列、つまり文字列間の`separator'はないものとみなされます。 `separator`が文字列でない場合はエラーです。"
    },
    "$keys": {
        "args": "object",
        "desc": "`object`内のキーを含む配列を返します。引数がオブジェクトの配列である場合、返される配列には、すべてのオブジェクトのすべてのキーの重複しないリストが含まれます。"
    },
    "$length": {
        "args": "str",
        "desc": "文字列 `str`の文字数を返します。 `str`が文字列でない場合、エラーがスローされます。"
    },
    "$lookup": {
        "args": "object, key",
        "desc": "オブジェクトのキーに関連付けられた値を返します。最初の引数がオブジェクトの配列である場合、配列内のすべてのオブジェクトが検索され、`key`のすべての出現に関連付けられた値が返されます。"
    },
    "$lowercase": {
        "args": "str",
        "desc": "`str`のすべての文字を小文字に変換した文字列を返します。"
    },
    "$max": {
        "args": "array",
        "desc": "配列の数値の最大値を返します。入力 `array`に数字でない項目が含まれていると、エラーになります。"
    },
    "$min": {
        "args": "array",
        "desc": "配列の数字の中の最小の数字を返します。入力 `array`に数字でない項目が含まれていると、エラーになります。"
    },
    "$not": {
        "args": "arg",
        "desc": "引数に否定(NOT)のブール値を返します。 `arg`は最初ブール値に変換されます"
    },
    "$number": {
        "args": "arg",
        "desc": "次の変換ルールを使用して、 `arg`パラメータを数値に変換します。\n\n - 数字は変わらない\n - 有効なJSON番号を表す一連の文字を含む文字列は、その番号に変換されます\n - 他のすべての値は、エラーがスローされる原因となります。"
    },
    "$split": {
        "args": "str[, separator][, limit]",
        "desc": "`str`を配列に分割します。 `str`が文字列でない場合はエラーです。オプションの `separator`パラメータは、区切り文字列を指定します。 `separator`が指定されていなければ、空の文字列が指定されたとみなされ、`str`は単一の文字列として配列に格納されます。 `separator`が文字列でない場合はエラーです。オプションの `limit`パラメータは、結果の配列に含める文字列の最大長を指定する数値です。`limit`を超えた文字列は破棄されます。 `limit`が指定されていなければ、` str`はすべて分割されます。分割される配列のサイズに制限はありません。 `limit`が負の数の場合はエラーです。"
    },
    "$spread": {
        "args": "object",
        "desc": "キー/値のペアを含むオブジェクトをオブジェクトの配列に分割します。オブジェクトの配列には、それぞれ入力オブジェクトの単一のキーと値のペアがあります。パラメータがオブジェクトの配列である場合、結果の配列には、指定された配列内のすべてのオブジェクトのすべてのキー/値ペアのオブジェクトが含まれます。"
    },
    "$string": {
        "args": "arg",
        "desc": "次の変換ルールを使用して*arg*パラメータを文字列に変換します。\n\n - 文字列の場合は変更はありません\n - 関数の場合は空の文字列に変換されます\n - 数値の無限大とNaNはJSONで値として表現できないためエラーが発生します\n - 他のすべての値は `JSON.stringify`関数を使用してJSON文字列に変換されます"
    },
    "$substring": {
        "args": "str、start [、length]",
        "desc": "`start`の位置（0が先頭位置）から始まる最初のパラメータ`str`の文字を含む文字列を返します。 `length`が指定されている場合、部分文字列は最大`length`文字を含みます。 `start`が負の場合、` str`の最後からの文字数を示します。"
    },
    "$substringAfter": {
        "args": "str、chars",
        "desc": "`str`の文字列` chars`が最初に出現した後の部分文字列を返します。 `str`が` chars`を含んでいなければ `str`を返します。"
    },
    "$substringBefore": {
        "args": "str、chars",
        "desc": "`str`に文字列が最初に出現する前の部分文字列を返します。 `str`が`chars`を含んでいなければ `str`を返します。"
    },
    "$sum": {
        "args": "array",
        "desc": "数値の `array`の合計を返します。`array`に数字でない項目が含まれていると、エラーになります。"
    },
    "$uppercase": {
        "args": "str",
        "desc": "`str`のすべての文字を大文字に変換した文字列を返します。"
    }
}